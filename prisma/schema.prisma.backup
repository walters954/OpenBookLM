generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(cuid())
  clerkId         String?               @unique
  email           String                @unique
  name            String?
  isGuest         Boolean               @default(false)
  credits         Int                   @default(100)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  notebooks       Notebook[]
  bookmarks       UserBookmark[]
  sharedNotebooks SharedWithUser[]
  creditHistory   CreditHistory[]
  usages          Usage[]
}

model CreditHistory {
  id          String    @id @default(cuid())
  userId      String
  amount      Int
  operation   String    // "ADD", "SUBTRACT"
  description String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Notebook {
  id           String           @id @default(cuid())
  title        String
  description  String?
  content      String?          @db.Text
  provider     String           @default("groq")
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  bookmarkedBy UserBookmark[]
  sharedWith   SharedWithUser[]
  isPublic     Boolean          @default(false)
  sources      Source[]
  notes        Note[]
  chats        Chat[]
  tags         NotebookTag[]
  isArchived   Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([userId])
}

model UserBookmark {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  notebookId String
  createdAt  DateTime @default(now())

  @@unique([userId, notebookId])
  @@index([userId])
  @@index([notebookId])
}

model SharedWithUser {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  notebookId String
  createdAt  DateTime @default(now())

  @@unique([userId, notebookId])
  @@index([userId])
  @@index([notebookId])
}

model Source {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  type        SourceType
  url         String?
  notebook    Notebook   @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  notebookId  String
  chunks      Chunk[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  dialogue    String?    @db.Text

  @@index([notebookId])
}

model Chunk {
  id         String   @id @default(cuid())
  content    String
  embedding  Json?
  sourceId   String
  startIndex Int
  endIndex   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  source     Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId])
}

model Chat {
  id         String    @id @default(cuid())
  title      String?
  notebookId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  notebook   Notebook  @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  messages   Message[]

  @@index([notebookId])
}

model Message {
  id        String     @id @default(cuid())
  content   String
  role      Role
  chatId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  citations Citation[]
  chat      Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model Citation {
  id         String   @id @default(cuid())
  messageId  String
  chunkId    String
  startIndex Int
  endIndex   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model Note {
  id         String    @id @default(cuid())
  title      String
  content    String
  notebookId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  notebook   Notebook  @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  tags       NoteTag[]

  @@index([notebookId])
}

model Tag {
  id         String        @id @default(cuid())
  name       String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  notes      NoteTag[]
  notebooks  NotebookTag[]
}

model NoteTag {
  noteId    String
  tagId     String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([noteId, tagId])
  @@index([noteId])
  @@index([tagId]) 
}

model NotebookTag {
  notebookId String
  tagId      String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([notebookId, tagId])
  @@index([notebookId])
  @@index([tagId])
}

model Usage {
  id         String    @id @default(cuid())
  userId     String
  type       UsageType
  amount     Int
  notebookId String?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

enum SourceType {
  PDF
  WEBPAGE
  TEXT
  MARKDOWN
  CODE
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}

enum UsageType {
  AUDIO_GENERATION
  DOCUMENT_PROCESSING
  CONTEXT_TOKENS
}
